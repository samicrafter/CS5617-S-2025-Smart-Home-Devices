# 🏠 Smart Home Controller

A Java Maven application demonstrating the **Interface Segregation Principle (ISP)** through a smart home device management system with a clean Text User Interface (TUI).

[![Java](https://img.shields.io/badge/Java-17+-orange.svg)](https://www.oracle.com/java/)
[![Maven](https://img.shields.io/badge/Maven-3.6+-blue.svg)](https://maven.apache.org/)
[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)

## 📋 Table of Contents

- [Overview](#-overview)
- [Interface Segregation Principle](#-interface-segregation-principle)
- [Features](#-features)
- [Architecture](#-architecture)
- [Installation](#-installation)
- [Usage](#-usage)
- [Testing](#-testing)
- [Project Structure](#-project-structure)
- [Contributing](#-contributing)
- [License](#-license)

## 🎯 Overview

This project showcases the **Interface Segregation Principle**, one of the SOLID principles, through a practical smart home controller application. Instead of creating one large interface that forces unnecessary method implementations, we create focused, role-specific interfaces that devices implement based on their actual capabilities.

### Key Learning Objectives

- ✅ Understand Interface Segregation Principle (ISP)
- ✅ See practical application of SOLID principles
- ✅ Learn clean architecture patterns
- ✅ Explore proper Java coding standards
- ✅ Practice test-driven development

## 🔧 Interface Segregation Principle

### ❌ What We Avoid (ISP Violation)
```java
// BAD: Fat interface forcing unnecessary implementations
interface SmartDevice {
    void turnOn();           // ✓ All devices need this
    void turnOff();          // ✓ All devices need this
    void dim(int level);     // ❌ Simple switches don't need this
    void setColor(String c); // ❌ Most devices don't need this
    void setTemp(int temp);  // ❌ Lights don't need this
}
```

### ✅ What We Implement (ISP Compliant)
```java
// GOOD: Segregated interfaces
interface Switchable {
    void turnOn();
    void turnOff();
    boolean isOn();
}

interface Dimmable {
    void dim(int level);
    int getDimLevel();
}

interface ColorControllable {
    void setColor(String color);
    String getColor();
}
```

## 🚀 Features

### Device Types
- **🔌 Simple Switch**: Basic on/off functionality
- **💡 Smart Light**: Switching + dimming capabilities
- **🌈 Colorful Light**: Switching + dimming + color control

### Functionality
- **Device Management**: Add, list, and control devices
- **Smart Operations**: Turn on/off, dim, change colors
- **Capability Detection**: Automatically detect device capabilities
- **Interactive TUI**: Clean text-based user interface
- **Comprehensive Testing**: Unit tests demonstrating ISP compliance

### Interface Segregation Benefits
- **No Bloated Contracts**: Devices implement only needed interfaces
- **Easy Extension**: Add new device types without breaking existing code
- **Clear Separation**: Each interface has a single, focused responsibility
- **Better Maintainability**: Changes to one capability don't affect others

## 🏗️ Architecture

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   TUI Layer     │    │  Controller      │    │   Interfaces    │
│                 │────│                  │────│                 │
│ SmartHomeTUI    │    │ DeviceController │    │ Switchable      │
└─────────────────┘    └──────────────────┘    │ Dimmable        │
                                               │ ColorControl... │
                                               │ DeviceInfo      │
                                               └─────────────────┘
                                                        │
                                                        │implements
                                                        ▼
                                               ┌─────────────────┐
                                               │   Device Impl   │
                                               │                 │
                                               │ SmartLight      │
                                               │ ColorfulLight   │
                                               │ SimpleSwitch    │
                                               └─────────────────┘
```

## 📦 Installation

### Prerequisites
- ☕ **Java 17+** - [Download here](https://www.oracle.com/java/technologies/downloads/)
- 📦 **Maven 3.6+** - [Download here](https://maven.apache.org/download.cgi)
- 💻 **IDE** (IntelliJ IDEA, Eclipse, VS Code)

### Setup Steps

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/smart-home-controller.git
   cd smart-home-controller
   ```

2. **Verify Java and Maven**
   ```bash
   java --version
   mvn --version
   ```

3. **Build the project**
   ```bash
   mvn clean compile
   ```

4. **Run tests**
   ```bash
   mvn test
   ```

5. **Start the application**
   ```bash
   mvn exec:java
   ```

## 🎮 Usage

### Running the Application

```bash
mvn exec:java
```

### Main Menu Options

```
╔══════════════════════════════════╗
║    🏠 Smart Home Controller     ║
║   Interface Segregation Demo    ║
╚══════════════════════════════════╝

📋 MENU OPTIONS:
1. 💡 Turn On Device
2. ⚫ Turn Off Device
3. 🔅 Dim Device
4. 🎨 Set Device Color
5. 📜 List All Devices
6. 🔍 Show Device Capabilities
7. ❌ Exit
```

### Example Usage Flow

1. **List Devices** (Option 5)
   ```
   📜 ALL DEVICES:
   🔸 Living Room Light [light-001] - OFF (Brightness: 100%)
      Type: Smart Light
      Capabilities: Switch Dim

   🔸 Bedroom RGB Light [rgb-002] - OFF (white, 100% brightness)
      Type: Colorful Smart Light
      Capabilities: Switch Dim Color
   ```

2. **Turn On Device** (Option 1)
   ```
   Select device to turn ON:
   1. Living Room Light [light-001] - OFF
   2. Bedroom RGB Light [rgb-002] - OFF
   Select device (1-2): 1
   ✓ Living Room Light turned ON (Brightness: 100%)
   ```

3. **Dim Device** (Option 3)
   ```
   🔅 DIMMABLE DEVICES:
   1. Living Room Light [light-001]
   2. Bedroom RGB Light [rgb-002]
   Select device (1-2): 1
   Enter dim level (0-100): 75
   ✓ Living Room Light dimmed to 75%
   ```

## 🧪 Testing

### Run All Tests
```bash
mvn test
```

### Test Coverage
- ✅ Interface implementation validation
- ✅ ISP compliance verification
- ✅ Device functionality testing
- ✅ Controller operations testing
- ✅ Exception handling testing

### Key Test Cases
```java
@Test
@DisplayName("Simple Switch implements minimal interfaces")
void testSimpleSwitchInterfaces() {
    assertTrue(simpleSwitch instanceof Switchable);
    assertTrue(simpleSwitch instanceof DeviceInfo);
    assertFalse(simpleSwitch instanceof Dimmable);        // ISP!
    assertFalse(simpleSwitch instanceof ColorControllable); // ISP!
}
```

### Running Specific Tests
```bash
# Run only device tests
mvn test -Dtest=DeviceTest

# Run with verbose output
mvn test -Dtest=DeviceTest -DforkCount=1 -DreuseForks=false
```

## 📁 Project Structure

```
smart-home-controller/
├── pom.xml                              # Maven configuration
├── README.md                            # This file
├── src/
│   ├── main/
│   │   └── java/
│   │       └── org/
│   │           └── smarthome/
│   │               ├── Main.java                    # Application entry point
│   │               ├── interfaces/                  # ISP-compliant interfaces
│   │               │   ├── Switchable.java         #   Basic switching
│   │               ├── devices/                     # Device implementations
│   │               │   ├── Light.java         #   Switch + Dim
│   │               │   └── SimpleSwitch.java       #   Switch only (ISP!)
│   └── test/
│       └── java/
│           └── LightTest.java              # Comprehensive tests
```

## 🔍 Code Quality Standards

### Naming Conventions
- **Classes**: PascalCase (`Light`)
- **Methods**: camelCase (`turnOn()`)
- **Packages**: lowercase (`org.example.smarthome.devices`)

### Best Practices Implemented
- ✅ Interface Segregation Principle
- ✅ Single Responsibility Principle
- ✅ Comprehensive JavaDoc documentation
- ✅ Proper exception handling
- ✅ Immutable fields where appropriate
- ✅ Clean separation of concerns
- ✅ Consistent code formatting
- ✅ Comprehensive unit testing

## 🛠️ Development Commands

```bash
# Clean and compile
mvn clean compile

# Run application
mvn exec:java

# Run tests with coverage
mvn clean test

# Package JAR
mvn package

# Run specific main class
mvn exec:java -Dexec.mainClass="com.smarthome.Main"

# Debug mode
mvn exec:java -Dexec.args="-debug"
```
